import java_cup.runtime.*;

parser code {:
  public parser (java.io.Reader input) {
    super(new Yylex(input));
  }
:};

// Keywords
terminal IF, ELSE, WHILE, DO, FOR, PRINT;

// Parenthesis
terminal LPAR, RPAR, LCURL, RCURL, SEMI;

// Operators
terminal ASIGN, PLUS, MINUS, UMINUS, TIMES, DIVIDE, EQ, NOTEQ, LT, LTEQ, GT, GTEQ, NOT, AND, OR;

// Basic symbols
terminal IDENT, INT;

// ======================================
// Now, nonterminals
nonterminal statement_list, statement, elseStatement;

// These production rules return registers
// condition: returns a register containing 0 or 1 (fale || true)
nonterminal String expression, condition;
// Util nonterminals
nonterminal String nt_newVar, nt_newLabel;

// Precedences
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left UMINUS;
precedence left ELSE;
precedence left AND;
precedence left OR;
precedence left NOT;

statement_list ::= statement
    | statement_list statement;

// utils
nt_newVar ::= {:
    RESULT = PLC.newVar();
:};
nt_newLabel ::= {:
    RESULT = PLC.newLabel();
:};

statement ::= expression SEMI
    | IF
        nt_newLabel:ifLabel nt_newLabel:elseLabel nt_newLabel:endLabel
        LPAR  condition:cond {:
            PLC.out.println("if (" + cond + " == 1" + ") goto " + ifLabel + ";");
            PLC.out.println("if (" + cond + " == 0" + ") goto " + elseLabel + ";");
            PLC.out.println(ifLabel + ":");
        :} RPAR statement {:
            PLC.out.println("goto " + endLabel + ";");
            PLC.out.println(elseLabel + ":");
        :} elseStatement {:
            PLC.out.println("goto " + endLabel + ";");
            PLC.out.println(endLabel + ":");
        :}
    | WHILE nt_newLabel:cond_label nt_newLabel:end_label LPAR {:
        PLC.out.println(cond_label + ":");
    :} condition:c RPAR {:
        PLC.out.println("if (" + c + " == 0) goto " + end_label + ";");
        // Same as do-while, switch execution
    :} statement {:
        PLC.out.println("goto " + cond_label + ";");
        PLC.out.println(end_label + ":");
    :}
    | DO nt_newLabel:do_label {:
        PLC.out.println(do_label + ":");
    :} statement WHILE LPAR condition:c {:
        PLC.out.println("if (" + c + " == 1) goto " + do_label + ";");
    :} RPAR SEMI
    | FOR LPAR expression:init_ex SEMI
        nt_newLabel:cond_label nt_newLabel:do_label nt_newLabel:step_label nt_newLabel:end_label {:
            PLC.out.println(cond_label + ":");
        :} condition:c {:
            PLC.out.println("if (" + c + " == 1) goto " + do_label + ";");
            PLC.out.println("goto " + end_label + ";");
        :} SEMI {:
            PLC.out.println(step_label + ":");
        :} expression:step_ex RPAR {:
            PLC.out.println("goto " + cond_label + ";");
            PLC.out.println(do_label + ":");
        :} statement {:
            PLC.out.println("goto " + step_label + ";");
            PLC.out.println(end_label + ":");
        :}
    | PRINT LPAR expression:v {:
        PLC.out.println("print " + v + ";");
    :} RPAR SEMI
    | LCURL statement_list RCURL;

// Resolve IF ELSE

elseStatement ::= | ELSE statement;

// Expression definition
expression ::= expression:v1 PLUS expression:v2 {:
        String var = PLC.newVar();
        PLC.out.println(var + " = " + v1 + " + " + v2 + ";");
        RESULT = var;
    :}
    | expression:e1 MINUS expression:e2 {:
        String var = PLC.newVar();
        PLC.out.println(var + " = " + e1 + " - " + e2 + ";");
        RESULT = var;
    :}
    | expression:e1 TIMES expression:e2 {:
        String var = PLC.newVar();
        PLC.out.println(var + " = " + e1 + " * " + e2 + ";");
        RESULT = var;
    :}
    | expression:e1 DIVIDE expression:e2 {:
        String var = PLC.newVar();
        PLC.out.println(var + " = " + e1 + " / " + e2 + ";");
        RESULT = var;
    :}
    | MINUS expression:e1 {:
        String var = PLC.newVar();
        PLC.out.println(var + " = " + "0 - " + e1 + ";");
        RESULT = var;
    :} %prec UMINUS// Unary minus (add precedence)
    | LPAR expression:e {: RESULT = e; :} RPAR
    | IDENT:id ASIGN expression:e {:
        PLC.out.println(id + " = " + e + ";");
        RESULT = id.toString();
     :}
    | IDENT:id {: RESULT = id.toString(); :}
    | INT:val {:
        String var = PLC.newVar();
        PLC.out.println(var + " = " + val + ";");
        RESULT = var;
    :};

condition ::= expression:e1 EQ expression:e2 {:
        String var = PLC.newVar();
        String trueL = PLC.newLabel();
        String endL = PLC.newLabel();
        PLC.out.println("if (" + e1 + " == " + e2 + ") goto " + trueL + ";");
        // False block first
        PLC.out.println(var + " = 0;");
        PLC.out.println("goto " + endL + ";");
        PLC.out.println(trueL + ":");
        PLC.out.println(var + " = 1;");
        PLC.out.println(endL + ":");
        RESULT = var;
    :}
    | expression:e1 NOTEQ expression:e2 {:
        String var = PLC.newVar();
        String trueL = PLC.newLabel();
        String endL = PLC.newLabel();
        PLC.out.println("if (" + e1 + " != " + e2 + ") goto " + trueL + ";");
        // False block first
        PLC.out.println(var + " = 0;");
        PLC.out.println("goto " + endL + ";");
        PLC.out.println(trueL + ":");
        PLC.out.println(var + " = 1;");
        PLC.out.println(endL + ":");
        RESULT = var;
    :}
    | expression:e1 LT expression:e2 {:
        String var = PLC.newVar();
        String trueL = PLC.newLabel();
        String endL = PLC.newLabel();
        PLC.out.println("if (" + e1 + " < " + e2 + ") goto " + trueL + ";");
        // False block first
        PLC.out.println(var + " = 0;");
        PLC.out.println("goto " + endL + ";");
        PLC.out.println(trueL + ":");
        PLC.out.println(var + " = 1;");
        PLC.out.println(endL + ":");
        RESULT = var;
    :}
    | expression:e1 LTEQ expression:e2 {:
        String var = PLC.newVar();
        String tl = PLC.newLabel();
        String el = PLC.newLabel();

        PLC.out.println("if (" + e1 + " < " + e2 + ") goto " + tl + ";");
        PLC.out.println("if (" + e1 + " == " + e2 + ") goto " + tl + ";");
        // False part
        PLC.out.println(var + " = 0;");
        PLC.out.println("goto " + el + ";");
        // True part
        PLC.out.println(tl + ":");
        PLC.out.println(var + " = 1;");
        // End
        PLC.out.println(el + ":");
        RESULT = var;
    :}
    | expression:e1 GT expression:e2 {:
        String var = PLC.newVar();
        String fl = PLC.newLabel();
        String el = PLC.newLabel();

        PLC.out.println("if (" + e1 + " < " + e2 + ") goto " + fl + ";");
        PLC.out.println("if (" + e1 + " == " + e2 + ") goto " + fl + ";");
        // True part
        PLC.out.println(var + " = 1;");
        PLC.out.println("goto " + el + ";");
        // False part
        PLC.out.println(fl + ":");
        PLC.out.println(var + " = 0;");
        // End
        PLC.out.println(el + ":");
        RESULT = var;
    :}
    | expression:e1 GTEQ expression:e2 {:
         String var = PLC.newVar();
         String trueL = PLC.newLabel();
         String endL = PLC.newLabel();
         PLC.out.println("if (" + e1 + " < " + e2 + ") goto " + trueL + ";");
         // False block
         PLC.out.println(var + " = 1;");
         PLC.out.println("goto " + endL + ";");
         // True block
         PLC.out.println(trueL + ":");
         PLC.out.println(var + " = 0;");
         // End
         PLC.out.println(endL + ":");
         RESULT = var;
    :}
    | NOT condition:c {:
        String trueL = PLC.newLabel();
        String endL = PLC.newLabel();
        PLC.out.println("if (" + c + " == 1) goto " + trueL + ";");
        PLC.out.println(c + " = 1;");
        PLC.out.println("goto " + endL + ";");
        PLC.out.println(trueL + ":");
        PLC.out.println(c + " = 0;");
        PLC.out.println(endL + ":");
        RESULT = c;
    :}
    |  condition:c1 AND nt_newLabel:fl {:
        // Short circuit
        PLC.out.println("if (" + c1 + " == 0) goto " + fl + ";");
    :} condition:c2 {:
        String var = PLC.newVar();
        String trueLabel = PLC.newLabel();
        String endLabel = PLC.newLabel();

        PLC.out.println("if (" + c2 + " == 0) goto " + fl + ";");
        PLC.out.println("goto " + trueLabel + ";");

        // Labels and actions
        PLC.out.println(trueLabel + ":");
        PLC.out.println(var + " = 1;");
        PLC.out.println("goto " + endLabel + ";");
        PLC.out.println(fl + ":");
        PLC.out.println(var + " = 0;");
        PLC.out.println("goto " + endLabel + ";");

        PLC.out.println(endLabel + ":");
        RESULT = var;
    :}
    | condition:c1 OR nt_newLabel:tl {:
        // Short circuit
        PLC.out.println("if (" + c1 + " == 1) goto " + tl + ";");
    :} condition:c2 {:
        String var = PLC.newVar();
        String falseLabel = PLC.newLabel();
        String endLabel = PLC.newLabel();

        PLC.out.println("if (" + c2 + " == 1) goto " + tl + ";");
        PLC.out.println("goto " + falseLabel + ";");

        // Labels and actions
        PLC.out.println(tl + ":");
        PLC.out.println(var + " = 1;");
        PLC.out.println("goto " + endLabel + ";");

        PLC.out.println(falseLabel + ":");
        PLC.out.println(var + " = 0;");

        PLC.out.println(endLabel + ":");
        RESULT = var;
    :}
    | LPAR condition:c1 {: RESULT = c1; :} RPAR;
