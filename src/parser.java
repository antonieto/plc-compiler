
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import lib.ExpressionSymbol;
import lib.GlobalRepository;
import lib.ExpressionList;
import lib.Type;
import lib.SymTable;
import lib.StringType;
import lib.FloatType;
import lib.CharType;
import lib.IntType;
import lib.ArrayType;
import lib.IncompatibleException;
import lib.UndefinedSymbolException;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\015\002\000\002\016\002\000\002\003\004" +
    "\000\002\003\004\000\002\017\002\000\002\020\002\000" +
    "\002\003\015\000\002\021\002\000\002\022\002\000\002" +
    "\003\013\000\002\023\002\000\002\024\002\000\002\003" +
    "\014\000\002\003\003\000\002\025\002\000\002\003\010" +
    "\000\002\003\005\000\002\004\002\000\002\004\004\000" +
    "\002\026\002\000\002\027\002\000\002\030\002\000\002" +
    "\031\002\000\002\006\023\000\002\011\003\000\002\011" +
    "\002\000\002\032\002\000\002\005\005\000\002\014\003" +
    "\000\002\014\005\000\002\012\003\000\002\012\006\000" +
    "\002\012\005\000\002\012\010\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\004\000\002\010\006\000\002\033\002\000\002\010\006" +
    "\000\002\010\005\000\002\010\010\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\006\000\002\034\002\000\002\010" +
    "\006\000\002\010\005\000\002\013\003\000\002\013\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\004\000\002\035\002\000\002\007\007\000\002\036" +
    "\002\000\002\007\007\000\002\037\002\000\002\007\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\036\004\013\006\010\007\014\010\025\011" +
    "\023\012\026\014\012\024\022\042\005\043\007\044\015" +
    "\045\020\046\011\047\016\001\002\000\042\002\001\004" +
    "\001\006\001\007\001\010\001\011\001\012\001\014\001" +
    "\015\001\024\001\042\001\043\001\044\001\045\001\046" +
    "\001\047\001\001\002\000\052\013\uffd2\015\uffd2\016\221" +
    "\017\uffd2\020\uffd2\021\uffd2\022\220\023\uffd2\024\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\037\uffd2\040\uffd2\041\222\001\002\000\004\020" +
    "\217\001\002\000\044\013\uffd1\015\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1\040\uffd1" +
    "\001\002\000\004\012\ufffd\001\002\000\044\013\uffcf\015" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf\024\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\037\uffcf\040\uffcf\001\002\000\036\004\013\006\010" +
    "\007\014\010\025\011\023\012\026\014\012\024\022\042" +
    "\005\043\007\044\015\045\020\046\011\047\016\001\002" +
    "\000\004\012\ufffd\001\002\000\036\004\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd\024\ufffd\042\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\001\002\000" +
    "\004\042\uffe4\001\002\000\044\013\uffce\015\uffce\017\uffce" +
    "\020\uffce\021\uffce\023\uffce\024\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\037\uffce" +
    "\040\uffce\001\002\000\040\002\141\004\013\006\010\007" +
    "\014\010\025\011\023\012\026\014\012\024\022\042\005" +
    "\043\007\044\015\045\020\046\011\047\016\001\002\000" +
    "\044\013\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0" +
    "\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0\001\002\000\014" +
    "\020\137\023\032\024\033\026\036\027\034\001\002\000" +
    "\022\012\026\014\027\024\022\042\005\043\007\045\020" +
    "\046\011\047\016\001\002\000\004\012\131\001\002\000" +
    "\044\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\014\ufff1\015\ufff1\024\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\001\002\000\004" +
    "\012\054\001\002\000\024\012\026\014\027\024\022\042" +
    "\005\043\007\044\030\045\020\046\011\047\016\001\002" +
    "\000\022\012\026\014\027\024\022\042\005\043\007\045" +
    "\020\046\011\047\016\001\002\000\004\013\044\001\002" +
    "\000\014\013\uffd6\023\032\024\033\026\036\027\034\001" +
    "\002\000\022\012\026\014\027\024\022\042\005\043\007" +
    "\045\020\046\011\047\016\001\002\000\022\012\026\014" +
    "\027\024\022\042\005\043\007\045\020\046\011\047\016" +
    "\001\002\000\022\012\026\014\027\024\022\042\005\043" +
    "\007\045\020\046\011\047\016\001\002\000\004\013\040" +
    "\001\002\000\022\012\026\014\027\024\022\042\005\043" +
    "\007\045\020\046\011\047\016\001\002\000\044\013\uffda" +
    "\015\uffda\017\uffda\020\uffda\021\uffda\023\uffda\024\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\037\uffda\040\uffda\001\002\000\044\013\uffd5\015" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\037\uffd5\040\uffd5\001\002\000\044\013\uffd9\015\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\037\uffd9\040\uffd9\001\002\000\044\013\uffdb\015\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\026\036\027\034" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\037" +
    "\uffdb\040\uffdb\001\002\000\044\013\uffdc\015\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\023\uffdc\024\uffdc\026\036\027\034\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\037\uffdc" +
    "\040\uffdc\001\002\000\022\012\026\014\027\024\022\042" +
    "\005\043\007\045\020\046\011\047\016\001\002\000\044" +
    "\013\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\024" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\037\uffd7\040\uffd7\001\002\000\004\015" +
    "\uffcc\001\002\000\016\015\uffc9\021\050\023\032\024\033" +
    "\026\036\027\034\001\002\000\022\012\026\014\027\024" +
    "\022\042\005\043\007\045\020\046\011\047\016\001\002" +
    "\000\004\015\uffc8\001\002\000\004\015\053\001\002\000" +
    "\044\013\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb" +
    "\024\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\037\uffcb\040\uffcb\001\002\000\024" +
    "\012\026\014\027\020\uffe5\024\022\042\005\043\007\045" +
    "\020\046\011\047\016\001\002\000\016\013\uffe6\020\uffe6" +
    "\023\032\024\033\026\036\027\034\001\002\000\004\020" +
    "\057\001\002\000\024\012\ufffd\014\ufffd\024\ufffd\036\ufffd" +
    "\042\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd\001\002\000" +
    "\024\012\ufffd\014\ufffd\024\ufffd\036\ufffd\042\ufffd\043\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\001\002\000\024\012\ufffd\014" +
    "\ufffd\024\ufffd\036\ufffd\042\ufffd\043\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\001\002\000\024\012\ufffd\014\ufffd\024\ufffd\036" +
    "\ufffd\042\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd\001\002" +
    "\000\024\012\uffeb\014\uffeb\024\uffeb\036\uffeb\042\uffeb\043" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\001\002\000\024\012\066" +
    "\014\027\024\022\036\070\042\005\043\007\045\020\046" +
    "\011\047\016\001\002\000\010\020\uffea\037\072\040\073" +
    "\001\002\000\026\012\066\014\027\024\022\036\070\042" +
    "\005\043\007\044\030\045\020\046\011\047\016\001\002" +
    "\000\026\023\032\024\033\026\036\027\034\030\104\031" +
    "\103\032\107\033\106\034\105\035\102\001\002\000\024" +
    "\012\066\014\027\024\022\036\070\042\005\043\007\045" +
    "\020\046\011\047\016\001\002\000\012\013\uffc1\020\uffc1" +
    "\037\uffc1\040\uffc1\001\002\000\024\012\ufffd\014\ufffd\024" +
    "\ufffd\036\ufffd\042\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\001\002\000\024\012\ufffd\014\ufffd\024\ufffd\036\ufffd\042" +
    "\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd\001\002\000\024" +
    "\012\uffbe\014\uffbe\024\uffbe\036\uffbe\042\uffbe\043\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\001\002\000\024\012\066\014\027" +
    "\024\022\036\070\042\005\043\007\045\020\046\011\047" +
    "\016\001\002\000\012\013\uffbd\020\uffbd\037\uffbd\040\uffbd" +
    "\001\002\000\024\012\uffc0\014\uffc0\024\uffc0\036\uffc0\042" +
    "\uffc0\043\uffc0\045\uffc0\046\uffc0\047\uffc0\001\002\000\024" +
    "\012\066\014\027\024\022\036\070\042\005\043\007\045" +
    "\020\046\011\047\016\001\002\000\012\013\uffbf\020\uffbf" +
    "\037\uffbf\040\073\001\002\000\022\012\026\014\027\024" +
    "\022\042\005\043\007\045\020\046\011\047\016\001\002" +
    "\000\022\012\026\014\027\024\022\042\005\043\007\045" +
    "\020\046\011\047\016\001\002\000\022\012\026\014\027" +
    "\024\022\042\005\043\007\045\020\046\011\047\016\001" +
    "\002\000\022\012\026\014\027\024\022\042\005\043\007" +
    "\045\020\046\011\047\016\001\002\000\022\012\026\014" +
    "\027\024\022\042\005\043\007\045\020\046\011\047\016" +
    "\001\002\000\022\012\026\014\027\024\022\042\005\043" +
    "\007\045\020\046\011\047\016\001\002\000\022\013\uffc5" +
    "\020\uffc5\023\032\024\033\026\036\027\034\037\uffc5\040" +
    "\uffc5\001\002\000\022\013\uffc4\020\uffc4\023\032\024\033" +
    "\026\036\027\034\037\uffc4\040\uffc4\001\002\000\022\013" +
    "\uffc3\020\uffc3\023\032\024\033\026\036\027\034\037\uffc3" +
    "\040\uffc3\001\002\000\022\013\uffc7\020\uffc7\023\032\024" +
    "\033\026\036\027\034\037\uffc7\040\uffc7\001\002\000\022" +
    "\013\uffc6\020\uffc6\023\032\024\033\026\036\027\034\037" +
    "\uffc6\040\uffc6\001\002\000\022\013\uffc2\020\uffc2\023\032" +
    "\024\033\026\036\027\034\037\uffc2\040\uffc2\001\002\000" +
    "\010\013\uffbc\037\072\040\073\001\002\000\030\013\uffd6" +
    "\023\032\024\033\026\036\027\034\030\104\031\103\032" +
    "\107\033\106\034\105\035\102\001\002\000\004\013\121" +
    "\001\002\000\012\013\uffbb\020\uffbb\037\uffbb\040\uffbb\001" +
    "\002\000\004\020\123\001\002\000\024\012\uffe9\013\uffe9" +
    "\014\uffe9\024\uffe9\042\uffe9\043\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\001\002\000\024\012\026\013\uffe5\014\027\024\022" +
    "\042\005\043\007\045\020\046\011\047\016\001\002\000" +
    "\004\013\126\001\002\000\036\004\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\014\uffe8\024\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\001\002\000\036" +
    "\004\013\006\010\007\014\010\025\011\023\012\026\014" +
    "\012\024\022\042\005\043\007\044\015\045\020\046\011" +
    "\047\016\001\002\000\044\002\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7" +
    "\024\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047" +
    "\uffe7\001\002\000\022\012\026\014\027\024\022\042\005" +
    "\043\007\045\020\046\011\047\016\001\002\000\014\013" +
    "\ufff0\023\032\024\033\026\036\027\034\001\002\000\004" +
    "\013\134\001\002\000\004\020\135\001\002\000\044\002" +
    "\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\014\uffef\015\uffef\024\uffef\042\uffef\043\uffef\044" +
    "\uffef\045\uffef\046\uffef\047\uffef\001\002\000\044\013\uffd8" +
    "\015\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\037\uffd8\040\uffd8\001\002\000\044\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\014\ufffc\015\ufffc\024\ufffc\042\ufffc\043\ufffc\044\ufffc\045" +
    "\ufffc\046\ufffc\047\ufffc\001\002\000\042\002\uffff\004\uffff" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\014\uffff\015" +
    "\uffff\024\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff" +
    "\047\uffff\001\002\000\004\002\000\001\002\000\004\042" +
    "\144\001\002\000\004\020\uffe3\001\002\000\012\016\151" +
    "\020\uffe0\021\uffe0\022\150\001\002\000\006\020\uffe2\021" +
    "\146\001\002\000\004\042\144\001\002\000\004\020\uffe1" +
    "\001\002\000\022\012\026\014\027\024\022\042\005\043" +
    "\007\045\020\046\011\047\016\001\002\000\022\012\026" +
    "\014\027\024\022\042\005\043\007\045\020\046\011\047" +
    "\016\001\002\000\014\017\153\023\032\024\033\026\036" +
    "\027\034\001\002\000\010\020\uffdf\021\uffdf\022\154\001" +
    "\002\000\022\012\026\014\027\024\022\042\005\043\007" +
    "\045\020\046\011\047\016\001\002\000\016\020\uffdd\021" +
    "\uffdd\023\032\024\033\026\036\027\034\001\002\000\016" +
    "\020\uffde\021\uffde\023\032\024\033\026\036\027\034\001" +
    "\002\000\036\004\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\014\ufff4\024\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\001\002\000\036\004\013\006\010" +
    "\007\014\010\025\011\023\012\026\014\012\024\022\042" +
    "\005\043\007\044\015\045\020\046\011\047\016\001\002" +
    "\000\004\006\162\001\002\000\004\012\163\001\002\000" +
    "\024\012\066\014\027\024\022\036\070\042\005\043\007" +
    "\045\020\046\011\047\016\001\002\000\010\013\ufff3\037" +
    "\072\040\073\001\002\000\004\013\166\001\002\000\004" +
    "\020\167\001\002\000\044\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2" +
    "\024\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047" +
    "\ufff2\001\002\000\004\012\ufffd\001\002\000\004\012\ufffd" +
    "\001\002\000\004\012\173\001\002\000\024\012\066\014" +
    "\027\024\022\036\070\042\005\043\007\045\020\046\011" +
    "\047\016\001\002\000\010\013\ufffa\037\072\040\073\001" +
    "\002\000\004\013\176\001\002\000\036\004\013\006\010" +
    "\007\014\010\025\011\023\012\026\014\012\024\022\042" +
    "\005\043\007\044\015\045\020\046\011\047\016\001\002" +
    "\000\044\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\024\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\001\002\000" +
    "\044\002\uffed\004\uffed\005\202\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\014\uffed\015\uffed\024\uffed\042\uffed\043" +
    "\uffed\044\uffed\045\uffed\046\uffed\047\uffed\001\002\000\044" +
    "\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\014\ufff8\015\ufff8\024\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\047\ufff8\001\002\000\036\004" +
    "\013\006\010\007\014\010\025\011\023\012\026\014\012" +
    "\024\022\042\005\043\007\044\015\045\020\046\011\047" +
    "\016\001\002\000\044\002\uffec\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\014\uffec\015\uffec\024" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\001\002\000\040\004\013\006\010\007\014\010\025\011" +
    "\023\012\026\014\012\015\206\024\022\042\005\043\007" +
    "\044\015\045\020\046\011\047\016\001\002\000\020\015" +
    "\uffc9\020\137\021\050\023\032\024\033\026\036\027\034" +
    "\001\002\000\044\002\uffee\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\014\uffee\015\uffee\024\uffee" +
    "\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\001" +
    "\002\000\004\012\ufffd\001\002\000\004\012\211\001\002" +
    "\000\024\012\ufff7\014\ufff7\024\ufff7\036\ufff7\042\ufff7\043" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\001\002\000\024\012\066" +
    "\014\027\024\022\036\070\042\005\043\007\045\020\046" +
    "\011\047\016\001\002\000\010\013\214\037\072\040\073" +
    "\001\002\000\036\004\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\014\ufff6\024\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\047\ufff6\001\002\000\036\004\013\006" +
    "\010\007\014\010\025\011\023\012\026\014\012\024\022" +
    "\042\005\043\007\044\015\045\020\046\011\047\016\001" +
    "\002\000\044\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\024\ufff5\042" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\001\002" +
    "\000\044\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\024\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\001\002\000" +
    "\022\012\026\014\027\024\022\042\005\043\007\045\020" +
    "\046\011\047\016\001\002\000\022\012\026\014\027\024" +
    "\022\042\005\043\007\045\020\046\011\047\016\001\002" +
    "\000\004\042\223\001\002\000\044\013\uffca\015\uffca\017" +
    "\uffca\020\uffca\021\uffca\023\uffca\024\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\037" +
    "\uffca\040\uffca\001\002\000\014\017\225\023\032\024\033" +
    "\026\036\027\034\001\002\000\046\013\uffcd\015\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\226\023\uffcd\024\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\037\uffcd\040\uffcd\001\002\000\022\012\026\014\027" +
    "\024\022\042\005\043\007\045\020\046\011\047\016\001" +
    "\002\000\044\013\uffd3\015\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\023\032\024\033\026\036\027\034\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\037\uffd3\040\uffd3\001\002" +
    "\000\044\013\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4\023" +
    "\032\024\033\026\036\027\034\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\014\002\016\003\003\005\005\006\023\010" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\206\001\001\000" +
    "\002\001\001\000\016\002\203\003\003\005\005\006\023" +
    "\010\204\013\045\001\001\000\004\016\167\001\001\000" +
    "\004\016\156\001\001\000\004\032\141\001\001\000\002" +
    "\001\001\000\012\003\137\005\005\006\023\010\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\030\001\001\000\006\010\046\013\045" +
    "\001\001\000\002\001\001\000\004\033\034\001\001\000" +
    "\004\010\042\001\001\000\004\010\041\001\001\000\004" +
    "\010\040\001\001\000\002\001\001\000\004\010\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\044\001" +
    "\001\000\002\001\001\000\004\034\051\001\001\000\002" +
    "\001\001\000\006\010\046\013\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\054" +
    "\011\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\057\001\001\000\004\016\060\001\001\000\004" +
    "\016\061\001\001\000\004\016\062\001\001\000\004\026" +
    "\063\001\001\000\006\007\064\010\066\001\001\000\004" +
    "\027\121\001\001\000\006\007\115\010\116\001\001\000" +
    "\002\001\001\000\006\007\070\010\066\001\001\000\002" +
    "\001\001\000\004\016\076\001\001\000\004\016\073\001" +
    "\001\000\004\036\074\001\001\000\006\007\075\010\066" +
    "\001\001\000\002\001\001\000\004\035\077\001\001\000" +
    "\006\007\100\010\066\001\001\000\002\001\001\000\004" +
    "\010\114\001\001\000\004\010\113\001\001\000\004\010" +
    "\112\001\001\000\004\010\111\001\001\000\004\010\110" +
    "\001\001\000\004\010\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\117\001\001\000" +
    "\004\033\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\123\001\001\000\006\010" +
    "\054\011\124\001\001\000\002\001\001\000\004\031\126" +
    "\001\001\000\012\003\127\005\005\006\023\010\020\001" +
    "\001\000\002\001\001\000\004\010\131\001\001\000\004" +
    "\025\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\144\014\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\144\014\146\001\001\000\002\001\001\000" +
    "\004\010\155\001\001\000\004\010\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\157\001\001" +
    "\000\012\003\160\005\005\006\023\010\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\163\010\066" +
    "\001\001\000\004\024\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\170\001\001" +
    "\000\004\016\171\001\001\000\002\001\001\000\006\007" +
    "\173\010\066\001\001\000\004\017\174\001\001\000\002" +
    "\001\001\000\012\003\176\005\005\006\023\010\020\001" +
    "\001\000\004\020\177\001\001\000\004\004\200\001\001" +
    "\000\002\001\001\000\012\003\202\005\005\006\023\010" +
    "\020\001\001\000\002\001\001\000\012\003\137\005\005" +
    "\006\023\010\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\207\001\001\000\002\001\001\000\004" +
    "\021\211\001\001\000\006\007\212\010\066\001\001\000" +
    "\002\001\001\000\004\022\214\001\001\000\012\003\215" +
    "\005\005\006\023\010\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\227\001\001\000\004\010\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\226\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public parser (java.io.Reader input) {
    super(new Yylex(input));
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    void print(String val) {
        PLXC.out.println(val);
    };

    void halt() {
        print("error;");
        print("halt;");
    };

    boolean checkExistance(String name) {
        if (!name.startsWith("$") && !SymTable.has(name)) {
            halt();
            return false;
        }
        return true;
    };

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // statement_list ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= statement_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // nt_newVar ::= 
            {
              String RESULT =null;
		
    RESULT = GlobalRepository.newVar();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_newVar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nt_newLabel ::= 
            {
              String RESULT =null;
		
    RESULT = GlobalRepository.newLabel();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_newLabel",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= expression SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= declStatement SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int ifLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ifLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ifLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int elseLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int elseLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String elseLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int endLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int endLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String endLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

            print("if (" + cond + " == 1" + ") goto " + ifLabel + ";");
            print("if (" + cond + " == 0" + ") goto " + elseLabel + ";");
            print(ifLabel + ":");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ifLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int ifLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ifLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int elseLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int elseLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String elseLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int endLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int endLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String endLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

            print("goto " + endLabel + ";");
            print(elseLabel + ":");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= IF nt_newLabel nt_newLabel nt_newLabel LPAR condition NT$0 RPAR statement NT$1 elseStatement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ifLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int ifLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String ifLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int elseLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int elseLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String elseLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int endLabelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int endLabelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String endLabel = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
            print("goto " + endLabel + ";");
            print(endLabel + ":");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int cond_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cond_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cond_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int end_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int end_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String end_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        print(cond_label + ":");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cond_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cond_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cond_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int end_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int end_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String end_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

        print("if (" + c + " == 0) goto " + end_label + ";");
        // Same as do-while, switch execution
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= WHILE nt_newLabel nt_newLabel LPAR NT$2 condition RPAR NT$3 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cond_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cond_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String cond_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int end_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int end_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String end_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        print("goto " + cond_label + ";");
        print(end_label + ":");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$4 ::= 
            {
              Object RESULT =null;
		int do_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int do_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String do_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        print(do_label + ":");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int do_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int do_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String do_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        print("if (" + c + " == 1) goto " + do_label + ";");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= DO nt_newLabel NT$4 statement WHILE LPAR condition NT$5 RPAR SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int do_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int do_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String do_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= forStatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$6 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol v = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        Type t = v.getType();
        print(t.printOperation(v));
        RESULT = v;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= PRINT LPAR expression NT$6 RPAR SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpressionSymbol v = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= LCURL statement_list RCURL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elseStatement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elseStatement ::= ELSE statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$7 ::= 
            {
              Object RESULT =null;
		int cond_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cond_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cond_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int do_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int do_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String do_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int step_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int step_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String step_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int end_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int end_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String end_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        print(cond_label + ":");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cond_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cond_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cond_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int do_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int do_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String do_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int step_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int step_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String step_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int end_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int end_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String end_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        print("if (" + c + " == 1) goto " + do_label + ";");
        print("goto " + end_label + ";");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cond_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cond_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String cond_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int do_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int do_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String do_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int step_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int step_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String step_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int end_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int end_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String end_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

        print(step_label + ":");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cond_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int cond_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String cond_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int do_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int do_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String do_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int step_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int step_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String step_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int end_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int end_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String end_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

        print("goto " + cond_label + ";");
        print(do_label + ":");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // forStatement ::= FOR LPAR forStepExpr SEMI nt_newLabel nt_newLabel nt_newLabel nt_newLabel NT$7 condition NT$8 SEMI NT$9 forStepExpr RPAR NT$10 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cond_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int cond_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String cond_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int do_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int do_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String do_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int step_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int step_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String step_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int end_labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int end_labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String end_label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		
        print("goto " + step_label + ";");
        print(end_label + ":");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStatement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // forStepExpr ::= expression 
            {
              ExpressionSymbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStepExpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // forStepExpr ::= 
            {
              ExpressionSymbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStepExpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$11 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 GlobalRepository.typeBuffer = Type.getType(t.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declStatement ::= TYPE NT$11 declarationList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 GlobalRepository.typeBuffer = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declStatement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declarationList ::= declaration 
            {
              ArrayList<ExpressionSymbol> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarationList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declarationList ::= declaration COMA declarationList 
            {
              ArrayList<ExpressionSymbol> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarationList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration ::= IDENT 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Type t = GlobalRepository.typeBuffer;
        ExpressionSymbol sym = new ExpressionSymbol(id.toString(), t);
        SymTable.add(id.toString(), sym);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaration ::= IDENT LSQR expression RSQR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sizeExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sizeExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionSymbol sizeExpr = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if (sizeExpr.getType() != IntType.getInstance() || !sizeExpr.isRegister()) {
            print("# Indexes must be integers");
            halt();
        }
        // Store size
        print(id.toString() + "$SIZE = " + sizeExpr + ";");
        ArrayType t = new ArrayType(GlobalRepository.typeBuffer, 0);
        ExpressionSymbol sym = new ExpressionSymbol(id.toString(), t);
        SymTable.add(id.toString(), sym);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaration ::= IDENT ASIGN expression 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Type t = GlobalRepository.typeBuffer;
        Type expressionType = e.getType();
        if (!t.isCompatibleWith(expressionType)) {
            halt();
        }
        ExpressionSymbol sym = new ExpressionSymbol(id.toString(), t);
        print(id.toString() + " = " + e + ";");
        SymTable.add(id.toString(), sym);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaration ::= IDENT LSQR expression RSQR ASIGN expression 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sizeExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sizeExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpressionSymbol sizeExpr = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arrExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol arrExpr = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (sizeExpr.getType() != IntType.getInstance() || !sizeExpr.isRegister()) {
            print("# Indexes must be integers");
            halt();
        }
        ArrayType t = new ArrayType(GlobalRepository.typeBuffer, 0);
        Type exprType = arrExpr.getType();
        if (!t.isCompatibleWith(exprType)) {
            print("# Incompatible types");
            halt();
        }
        ExpressionSymbol sym = new ExpressionSymbol(id.toString(), t);
        print(id.toString() + " = " + arrExpr + ";");
        // Store size (again smh)
        print(id.toString() + "$SIZE = " + sizeExpr + ";");
        SymTable.add(id.toString(), sym);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression PLUS expression 
            {
              ExpressionSymbol RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionSymbol e1 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e2 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (!(e1.isCompatibleWith(e2) || e2.isCompatibleWith(e1))) {
            halt();
        }
        Type t1 = e1.getType();
        Type t2 = e2.getType();
        Type floatType = FloatType.getInstance();
        // Prioritize float
        Type t = t1 == floatType || t2 == floatType ? floatType : e1.getType();
        ExpressionSymbol dest = new ExpressionSymbol(GlobalRepository.newVar(), t);
        String line = t.addOperation(dest, e1, e2);
        print(line);
        RESULT = dest;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression MINUS expression 
            {
              ExpressionSymbol RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionSymbol e1 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e2 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (!(e1.isCompatibleWith(e2) || e2.isCompatibleWith(e1))) {
            halt();
        }
        Type t = e1.getType();
        ExpressionSymbol dest = new ExpressionSymbol(GlobalRepository.newVar(), t);
        String line = t.subsOperation(dest, e1, e2);
        print(line);
        RESULT = dest;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression TIMES expression 
            {
              ExpressionSymbol RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionSymbol e1 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e2 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (!(e1.isCompatibleWith(e2) || e2.isCompatibleWith(e1))) {
            halt();
        }
        Type t = e1.getType();
        ExpressionSymbol dest = new ExpressionSymbol(GlobalRepository.newVar(), t);
        String line = t.multOperation(dest, e1, e2);
        print(line);
        RESULT = dest;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression DIVIDE expression 
            {
              ExpressionSymbol RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionSymbol e1 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e2 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (!(e1.isCompatibleWith(e2) || e2.isCompatibleWith(e1))) {
            halt();
        }
        Type t = e1.getType();
        ExpressionSymbol dest = new ExpressionSymbol(GlobalRepository.newVar(), t);
        String line = e1.getType().divideOperation(dest, e1, e2);
        print(line);
        RESULT = dest;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= MINUS expression 
            {
              ExpressionSymbol RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e1 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ExpressionSymbol tmp = new ExpressionSymbol(GlobalRepository.newVar(), e1.getType());
        ExpressionSymbol dest = new ExpressionSymbol(GlobalRepository.newVar(), e1.getType());
        print(tmp + " = 0;");
        Type t = e1.getType();
        String line = t.subsOperation(dest, tmp, e1);
        print(line);
        RESULT = dest;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= LPAR TYPE RPAR expression 
            {
              ExpressionSymbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e1 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Type type = Type.getType(t.toString());
        ExpressionSymbol temp = new ExpressionSymbol(GlobalRepository.newVar(), type);
        String line = type.castOperation(temp, e1);
        print(line);
        RESULT = temp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$12 ::= 
            {
              ExpressionSymbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= LPAR expression NT$12 RPAR 
            {
              ExpressionSymbol RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ExpressionSymbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionSymbol e = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= IDENT ASIGN expression 
            {
              ExpressionSymbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (!SymTable.has(id.toString())) {
            halt();
            RESULT = e;
        }
        ExpressionSymbol sym = SymTable.get(id.toString());
        Type t = sym.getType();
        if (!sym.isCompatibleWith(e)) {
            halt();
            RESULT = e;
        }
        if (t instanceof ArrayType) {
            String haltLabel = GlobalRepository.newLabel();
        }
        print(t.assignOperation(sym, e));
        RESULT = e;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= IDENT LSQR expression RSQR ASIGN expression 
            {
              ExpressionSymbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpressionSymbol index = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
         if (!SymTable.has(id.toString())) {
             halt();
             RESULT = e;
         }
         ExpressionSymbol sym = SymTable.get(id.toString());
         if (!(sym.getType() instanceof ArrayType)) {
            halt();
         }
         ArrayType arrayType = (ArrayType) sym.getType();
         boolean exprMatchesArrayType = arrayType.getContentType().isCompatibleWith(e.getType());
         boolean isIndexInt = index.getType() == IntType.getInstance();
         // If operand doesn't match array type
         if (!exprMatchesArrayType || !isIndexInt) {
            halt();
         }

         String haltLabel = GlobalRepository.newLabel();
         String continueLabel = GlobalRepository.newLabel();
         print("if (" + index + " < 0) goto " + haltLabel + ";");
         print("if (" + sym + "$SIZE < " + index + ") goto " + haltLabel + ";");
         print("if (" + sym + "$SIZE == " + index + ") goto " + haltLabel + ";");
         print("goto " + continueLabel + ";");
         print(haltLabel + ":");
         halt();
         print(continueLabel + ":");
         // Assignment
         print(id + "[" + index + "] = " + e + ";");
         RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= IDENT 
            {
              ExpressionSymbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(!SymTable.has(id.toString())) {
            halt();
        }
        RESULT = SymTable.get(id.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= INT 
            {
              ExpressionSymbol RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String var = GlobalRepository.newVar();
        print(var + " = " + val + ";");
        RESULT = new ExpressionSymbol(var, IntType.getInstance());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= FLOAT 
            {
              ExpressionSymbol RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String var = GlobalRepository.newVar();
        print(var + " = " + val + ";");
        RESULT = new ExpressionSymbol(var, FloatType.getInstance());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= CHAR 
            {
              ExpressionSymbol RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ExpressionSymbol sym = new ExpressionSymbol(GlobalRepository.newVar(), CharType.getInstance());
        print(sym + " = " + CharType.strToASCII(val.toString()) + ";");
        RESULT = sym;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= STRING 
            {
              ExpressionSymbol RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // Store all characters in temp arr of chars
        String var = GlobalRepository.newVar();
        val = StringType.convertEscapedCharacters(val.toString());
        for (int i = 0; i < val.toString().length(); i++) {
            char c = val.toString().charAt(i);
            print(var + "[" + i + "] = " + (int) c + ";");
        }
        // Null-terminated string
        print(var + "[" + val.toString().length() + "] = " + 0 + ";");
        RESULT = new ExpressionSymbol(var, StringType.getInstance());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= IDENT LSQR expression RSQR 
            {
              ExpressionSymbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionSymbol e = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        // Index array at id
        if (!SymTable.has(id.toString())) {
            halt();
        }
        ExpressionSymbol sym = SymTable.get(id.toString());
        Type t = sym.getType();
        if (!(t instanceof ArrayType) || e.getType() != IntType.getInstance()) {
            halt();
        }

        // Range check
        String haltLabel = GlobalRepository.newLabel();
        String continueLabel = GlobalRepository.newLabel();
        print("if (" + e + " < 0) goto " + haltLabel + ";");
        print("if (" + sym + "$SIZE < " + e + ") goto " + haltLabel + ";");
        print("if (" + sym + "$SIZE == " + e + ") goto " + haltLabel + ";");
        print("goto " + continueLabel + ";");
        print(haltLabel + ":");
        halt();
        print(continueLabel + ":");

        Type contentType = ((ArrayType) t).getContentType();
        ExpressionSymbol tmp = new ExpressionSymbol(GlobalRepository.newVar(), contentType);
        print(tmp + " = " + id.toString() + "[" + e + "];");
        RESULT = tmp;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$13 ::= 
            {
              ExpressionSymbol RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExpressionSymbol> ls = (ArrayList<ExpressionSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        Type contentType = null;
        if (ls.size() > 0) {
            contentType = ls.get(0).getType();
        }
        ArrayType type = new ArrayType(contentType, ls.size());
        ExpressionSymbol resultSym = new ExpressionSymbol(GlobalRepository.newVar(), type);
        // Write all symbols to temporary array
        for (int i = 0; i < ls.size() ; i++) {
            print(resultSym + "[" + i + "] = " + ls.get(i) + ";");
        }
        // Store size too!
        print(resultSym + "$SIZE = " + ls.size() + ";");
        RESULT = resultSym;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= LCURL listExpression NT$13 RCURL 
            {
              ExpressionSymbol RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (ExpressionSymbol) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ExpressionSymbol> ls = (ArrayList<ExpressionSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= IDENT DOT IDENT 
            {
              ExpressionSymbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object attribute = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ExpressionSymbol sym = SymTable.get(id.toString());
        if (sym == null) {
            halt();
        }
        Type t = sym.getType();
        RESULT = t.attributeAccess(sym, attribute.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listExpression ::= expression 
            {
              ArrayList<ExpressionSymbol> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Type t = e.getType();
        ArrayList<ExpressionSymbol> ls = new ArrayList<>();
        ls.add(e);
        RESULT = ls;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listExpression ::= expression COMA listExpression 
            {
              ArrayList<ExpressionSymbol> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionSymbol e = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExpressionSymbol> ls = (ArrayList<ExpressionSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        // Exact type match
        if (e.getType() != ls.get(0).getType()) {
            halt();
        }
        ls.add(0, e);
        RESULT = ls;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condition ::= expression EQ expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionSymbol e1 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e2 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String var = GlobalRepository.newVar();
        String trueL = GlobalRepository.newLabel();
        String endL = GlobalRepository.newLabel();
        print("if (" + e1 + " == " + e2 + ") goto " + trueL + ";");
        // False block first
        print(var + " = 0;");
        print("goto " + endL + ";");
        print(trueL + ":");
        print(var + " = 1;");
        print(endL + ":");
        RESULT = var;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condition ::= expression NOTEQ expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionSymbol e1 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e2 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String var = GlobalRepository.newVar();
        String trueL = GlobalRepository.newLabel();
        String endL = GlobalRepository.newLabel();
        print("if (" + e1 + " != " + e2 + ") goto " + trueL + ";");
        // False block first
        print(var + " = 0;");
        print("goto " + endL + ";");
        print(trueL + ":");
        print(var + " = 1;");
        print(endL + ":");
        RESULT = var;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condition ::= expression LT expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionSymbol e1 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e2 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String var = GlobalRepository.newVar();
        String trueL = GlobalRepository.newLabel();
        String endL = GlobalRepository.newLabel();
        print("if (" + e1 + " < " + e2 + ") goto " + trueL + ";");
        // False block first
        print(var + " = 0;");
        print("goto " + endL + ";");
        print(trueL + ":");
        print(var + " = 1;");
        print(endL + ":");
        RESULT = var;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condition ::= expression LTEQ expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionSymbol e1 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e2 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String var = GlobalRepository.newVar();
        String tl = GlobalRepository.newLabel();
        String el = GlobalRepository.newLabel();

        print("if (" + e1 + " < " + e2 + ") goto " + tl + ";");
        print("if (" + e1 + " == " + e2 + ") goto " + tl + ";");
        // False part
        print(var + " = 0;");
        print("goto " + el + ";");
        // True part
        print(tl + ":");
        print(var + " = 1;");
        // End
        print(el + ":");
        RESULT = var;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condition ::= expression GT expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionSymbol e1 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e2 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String var = GlobalRepository.newVar();
        String fl = GlobalRepository.newLabel();
        String el = GlobalRepository.newLabel();

        print("if (" + e1 + " < " + e2 + ") goto " + fl + ";");
        print("if (" + e1 + " == " + e2 + ") goto " + fl + ";");
        // True part
        print(var + " = 1;");
        print("goto " + el + ";");
        // False part
        print(fl + ":");
        print(var + " = 0;");
        // End
        print(el + ":");
        RESULT = var;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condition ::= expression GTEQ expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionSymbol e1 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressionSymbol e2 = (ExpressionSymbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
         String var = GlobalRepository.newVar();
         String trueL = GlobalRepository.newLabel();
         String endL = GlobalRepository.newLabel();
         print("if (" + e1 + " < " + e2 + ") goto " + trueL + ";");
         // False block
         print(var + " = 1;");
         print("goto " + endL + ";");
         // True block
         print(trueL + ":");
         print(var + " = 0;");
         // End
         print(endL + ":");
         RESULT = var;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condition ::= NOT condition 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String trueL = GlobalRepository.newLabel();
        String endL = GlobalRepository.newLabel();
        print("if (" + c + " == 1) goto " + trueL + ";");
        print(c + " = 1;");
        print("goto " + endL + ";");
        print(trueL + ":");
        print(c + " = 0;");
        print(endL + ":");
        RESULT = c;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$14 ::= 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        // Short circuit
        print("if (" + c1 + " == 0) goto " + fl + ";");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condition ::= condition AND nt_newLabel NT$14 condition 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String var = GlobalRepository.newVar();
        String trueLabel = GlobalRepository.newLabel();
        String endLabel = GlobalRepository.newLabel();

        print("if (" + c2 + " == 0) goto " + fl + ";");
        print("goto " + trueLabel + ";");

        // Labels and actions
        print(trueLabel + ":");
        print(var + " = 1;");
        print("goto " + endLabel + ";");
        print(fl + ":");
        print(var + " = 0;");
        print("goto " + endLabel + ";");

        print(endLabel + ":");
        RESULT = var;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$15 ::= 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        // Short circuit
        print("if (" + c1 + " == 1) goto " + tl + ";");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condition ::= condition OR nt_newLabel NT$15 condition 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String var = GlobalRepository.newVar();
        String falseLabel = GlobalRepository.newLabel();
        String endLabel = GlobalRepository.newLabel();

        print("if (" + c2 + " == 1) goto " + tl + ";");
        print("goto " + falseLabel + ";");

        // Labels and actions
        print(tl + ":");
        print(var + " = 1;");
        print("goto " + endLabel + ";");

        print(falseLabel + ":");
        print(var + " = 0;");

        print(endLabel + ":");
        RESULT = var;

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$16 ::= 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = c1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condition ::= LPAR condition NT$16 RPAR 
            {
              String RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
